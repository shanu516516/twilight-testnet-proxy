map $http_upgrade $connection_upgrade {
   default upgrade;
   '' close;
}  

upstream relayer {
  server relayer-dev:3031;
}
upstream rpckafka {
  server rpckafka:3032;

}

upstream api {
  server frontend:8088;
}
upstream ws {
  server frontend:8088;
}

# relayer.example.com
server {
    listen 80;
    listen [::]:80;

    server_name relayer.example.com www.relayer.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://relayer.example.com$request_uri;
    }
}
# web.example.com
server {
    listen 80;
    listen [::]:80;

    server_name web.example.com www.web.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://web.example.com$request_uri;
    }
}

# lcd.example.com
server {
    listen 80;
    listen [::]:80;

    server_name lcd.example.com www.lcd.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://lcd.example.com$request_uri;
    }
}

# rpc.example.com
server {
    listen 80;
    listen [::]:80;

    server_name rpc.example.com www.rpc.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://rpc.example.com$request_uri;
    }
}



# nykschain.example.com
server {
    listen 80;
    listen [::]:80;

    server_name nykschain.example.com www.nykschain.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://nykschain.example.com$request_uri;
    }
}

# faucet-rpc.example.com
server {
    listen 80;
    listen [::]:80;

    server_name faucet-rpc.example.com www.faucet-rpc.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://faucet-rpc.example.com$request_uri;
    }
}

# explorer.example.com
server {
    listen 80;
    listen [::]:80;

    server_name explorer.example.com www.explorer.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://explorer.example.com$request_uri;
    }
}

# tx-submit.example.com
#port for zkoracle 7000 port
server {
    listen 80;
    listen [::]:80;

    server_name tx-submit.example.com www.tx-submit.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://tx-submit.example.com$request_uri;
    }
}

# zk-kyc.example.com
server {
    listen 80;
    listen [::]:80;

    server_name zk-kyc.example.com www.zk-kyc.example.com;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://zk-kyc.example.com$request_uri;
    }
}


# #########################################################
# #########################################################

# relayer.example.com at ssl
server {
    listen 443 default_server ssl http2;
    listen [::]:443 ssl http2;

    server_name relayer.example.com;

    ssl_certificate /etc/nginx/ssl/live/relayer.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/relayer.example.com/privkey.pem;
    
    location /relayer {
    proxy_pass http://relayer;
    }
    location /clientapi {
        proxy_pass http://rpckafka;
    }
    location /ws {
        proxy_pass http://ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }
    location = /check {
        proxy_pass http://api;
    }
    location = /api/private {
        proxy_pass http://api;
    }
    location /api {
        proxy_pass http://api;
    }
    location = /register {
        # proxy_pass http://api;
        proxy_pass http://auth:5000/register;
        
    }
    location = /regenerate {
        proxy_pass http://api;
    }    
  
}



# lcd.example.com at ssl for port 1317
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name lcd.example.com;

    ssl_certificate     /etc/nginx/ssl/live/lcd.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/lcd.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    location / {
        proxy_pass http://172.17.0.1:1317/;   # trailing slash keeps URI after /lcd/
        proxy_http_version          1.1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # add_header Access-Control-Allow-Origin  *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}
# rpc.example.com at ssl for port 26657 with websocket
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name rpc.example.com;

    ssl_certificate     /etc/nginx/ssl/live/rpc.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/rpc.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://172.17.0.1:26657/;
        proxy_http_version 1.1;

        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 60s;


        # ---------- pre-flight ----------
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin  *                                      always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'                   always;
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization'          always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # ---------- simple / actual requests ----------
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'                   always;
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization'          always;
    }    
}

# web.example.com at ssl
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name web.example.com;

    ssl_certificate     /etc/nginx/ssl/live/web.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/web.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;


    location / {
        proxy_pass http://frontend-pool:3000;   # trailing slash keeps URI after /lcd/
        proxy_http_version          1.1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin  *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }

}


# zkos server at ssl
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name nykschain.example.com;

    ssl_certificate     /etc/nginx/ssl/live/nykschain.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/nykschain.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;


    location /zkos {
      proxy_pass http://172.17.0.1:3030;
    }

}

# faucet-rpc.example.com at ssl for port 6969
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name faucet-rpc.example.com;

    ssl_certificate     /etc/nginx/ssl/live/faucet-rpc.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/faucet-rpc.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    location / {
        proxy_pass http://172.17.0.1:6969/;   # trailing slash keeps URI after /lcd/
        proxy_http_version          1.1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin  *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin  *                                       always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'                   always;
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization'          always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}
# explorer.example.com at ssl for port 6969
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name explorer.example.com;

    ssl_certificate     /etc/nginx/ssl/live/explorer.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/explorer.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    location / {
        proxy_pass http://146.190.129.13:80/;   # trailing slash keeps URI after /lcd/
        proxy_http_version          1.1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin  *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin  *                                       always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'                   always;
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization'          always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}

# tx-submit.example.com at ssl for port 7000
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name tx-submit.example.com;

    ssl_certificate     /etc/nginx/ssl/live/tx-submit.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/tx-submit.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    location / {
        proxy_pass http://172.17.0.1:7000;   # trailing slash keeps URI after /lcd/
        proxy_http_version          1.1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # add_header Access-Control-Allow-Origin  *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin  *                                       always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'                   always;
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization'          always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}

# zk-kyc.example.com at ssl
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name zk-kyc.example.com;

    ssl_certificate     /etc/nginx/ssl/live/zk-kyc.example.com/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/zk-kyc.example.com/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    location / {
        proxy_pass http://172.17.0.1:3001/;   
        proxy_http_version          1.1;
        proxy_set_header Host       $host;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header Access-Control-Allow-Origin  *;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
        add_header Access-Control-Allow-Headers 'Content-Type, Authorization';
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin  *                                       always;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS'                   always;
            add_header Access-Control-Allow-Headers 'Content-Type, Authorization'          always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}
